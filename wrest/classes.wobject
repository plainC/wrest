#include all "wrest.h"

guard WREST

class UVloop
  read uv_loop_t* loop

  construct
  public int run(uv_run_mode mode)
  public void stop()
  public uint64_t now()


abstract class UVtcp
  read struct UVloop* loop
  read uv_tcp_t handle
  read char* address
  read int port
  read struct sockaddr_in addr

  construct
  public int parse_address()
  signal on_error(const char* message)


class UVtcpServer : UVtcp

  construct
  public int bind(int flags)
  public int listen(int backlog)

  signal on_data(char* data, size_t size, char* ip, char** response, size_t* response_size)
  signal on_connection_open(const char* message)
  signal on_connection_close(const char* message)



class RestServer : UVtcpServer

  construct
  signal on_get(struct wrest_http_req* req, char** response, size_t* response_length)
  signal on_post(struct wrest_http_req* req, char** response, size_t* response_length)
  signal on_put(struct wrest_http_req* req, char** response, size_t* response_length)
  signal on_patch(struct wrest_http_req* req, char** response, size_t* response_length)
  signal on_delete(struct wrest_http_req* req, char** response, size_t* response_length)
  signal on_head(struct wrest_http_req* req, char** response, size_t* response_length)
  signal on_connect(struct wrest_http_req* req, char** response, size_t* response_length)
  signal on_options(struct wrest_http_req* req, char* body, char** response, size_t* response_length)
  signal on_trace(struct wrest_http_req* req, char** response, size_t* response_length)
  signal on_quit(struct wrest_http_req* req, char** response, size_t* response_length)


class UVtcpClient : UVtcp
  read uv_connect_t* conn
  private const char* message
  private size_t len

  construct
  finalize
  public int connect(const char* message, size_t len)

